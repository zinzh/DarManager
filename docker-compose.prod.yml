services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: darmanager_db
    environment:
      POSTGRES_DB: darmanager
      POSTGRES_USER: darmanager_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-darmanager_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init_multitenant.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - darmanager_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U darmanager_user -d darmanager"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: darmanager_api
    environment:
      - DATABASE_URL=postgresql://darmanager_user:${DB_PASSWORD:-darmanager_password_2024}@database:5432/darmanager
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_change_in_production}
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
    depends_on:
      database:
        condition: service_healthy
    networks:
      - darmanager_network
    restart: always

  # Next.js Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: darmanager_frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-}
      - NODE_ENV=production
    depends_on:
      - api
    networks:
      - darmanager_network
    restart: always

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: darmanager_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    networks:
      - darmanager_network
    restart: always

volumes:
  postgres_data:

networks:
  darmanager_network:
    driver: bridge